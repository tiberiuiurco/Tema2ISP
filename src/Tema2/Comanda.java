// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package Tema2;

import java.util.ArrayList;

public class Comanda {
	
	private int distanta;
	private int greutate;
	private int volum;
	private int pret;
	private Valuta valuta;
	private boolean livrata;
	private Client expeditor;
	private Persoana destinatar;
	private boolean platita;
	
	public Comanda() {
		
	}

	public Comanda(int distanta, int greutate, int volum, int pret, Valuta valuta, boolean livrata, Client expeditor, Persoana destinatar, boolean platita) {
		this.distanta = distanta;
		this.greutate = greutate;
		this.volum = volum;
		this.valuta = valuta;
		this.livrata = livrata;
		this.expeditor = expeditor;
		this.destinatar = destinatar;
		this.platita = platita;
	}
	
	public void afisare() {
		System.out.println("Distanta: " + distanta);
		System.out.println("Greutate: " + greutate);
		System.out.println("Volum: " + volum);
		System.out.println("Pret: " + pret);
		System.out.println("Valuta: " + valuta);
		
		if (livrata)
			System.out.println("Livrata: DA");
		else 
			System.out.println("Livrata: NU");
		
		if (platita)
			System.out.println("Platita: DA");
		else 
			System.out.println("Platita: NU");
		System.out.println("");
		//e un client
		System.out.println("EXPEDITOR");
		expeditor.afisare();
		//o persoana
		System.out.println("DESTINATAR");
		destinatar.afisare();
	}
	
	public float calcularePret() {
		float pret_per_kg = 0.3f;
		float pret_per_km = 0.3f;
		float pret_per_m3 = 200.0f;
		return conversieValutara(pret_per_kg*greutate+pret_per_km*distanta+pret_per_m3*volum);
	}
	
	public float conversieValutara(float pretInLei) {
		switch(this.valuta) {
		case Euro:
			return pretInLei*0.202f;
		case Rubla:
			return pretInLei*13.634f;
		case Ron:
			return pretInLei;
		case FrancElvetian:
			return pretInLei*0.211f;
		case Lira:
			return pretInLei*0.171f;
		default:
			return pretInLei;
		}
	}
	
	public void marcheazaLivrat() {
		this.livrata = true;
	}
	
	public int calculareDistanta(ArrayList<Locatie> listaOrase, int[][] harta, Persoana destinatar, Persoana expeditor) {
		
		int u;
		int distanta = 0;
		int INT_MAX = 999;
		Locatie dest = destinatar.transmiteLocatie();
		Locatie exp = expeditor.transmiteLocatie();
		
		int sursa  = listaOrase.indexOf(exp); // +1 in realitate
		int destinatie = listaOrase.indexOf(dest);
		
		int[] dist = new int[listaOrase.size()];
		int[] sps = new int[listaOrase.size()];
		int[] pred = new int[listaOrase.size()];
		
		for (int i = 0; i  < listaOrase.size(); i++) {
			dist[i] = INT_MAX;
			sps[i] = 0;
			pred[i] = -1;
		}
		
		dist[sursa] = 0;
		
		for (int j = 0; j < listaOrase.size() - 1; j++) {
			int v, min = INT_MAX, min_index = 0;
			for (v = 0; v < listaOrase.size(); v++) {
				if (sps[v] == 0 && dist[v] <= min) {
					min = dist[v];
					min_index = v;
				}
			}
			u = min_index; // gasire nod cu distanta minima fata de sursa care nu e in sps
			sps[u] = 1;
			//pred [u] = sps[j];
			
			for (int i = 0; i < listaOrase.size(); i++){	//update distanta
				if(sps[i] == 0 && harta[u][i] != 0 && dist[u] != INT_MAX && dist[u] + harta[u][i] < dist[i])
				{
					dist[i] = dist[u] + harta[u][i];
					pred[i] = u;
				}
			}
		}
		
		int aux = destinatie;
		ArrayList<Integer> cale = new ArrayList<Integer>();
		while (aux != sursa)
		{
			//System.out.print(listaOrase.get(aux).getLocaliate() + " -> ");
			cale.add(aux);
			aux = pred[aux];
		}
		cale.add(aux);
		for (int i = cale.size() - 1; i >0; i--)
			System.out.print(listaOrase.get(cale.get(i)).getLocaliate() + " -> ");
		System.out.print(listaOrase.get(cale.get(0)).getLocaliate());
		return dist[destinatie]*100; 
	}
	
	public void marcheazaPlatita() {
		this.platita = true;
	}
	
	public float calculareTaxe() {
		switch(this.valuta) {
		case Euro:
			return 1.11f;
		case Rubla:
			return 1.20f;
		case Ron:
			return 1f;
		case FrancElvetian:
			return 1.15f;
		case Lira:
			return 1.25f;
		default:
			return 1f;
		}
	}
	
	public boolean verificaPlatita(){
		return platita;
	}
};
